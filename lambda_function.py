import json
import os
import boto3
import uuid
from datetime import datetime, timedelta, timezone
from linebot import LineBotApi, WebhookHandler
from linebot.models import TextSendMessage

s3 = boto3.client('s3')
S3_BUCKET = 'missingpersonsbucket'

dynamodb = boto3.resource('dynamodb')
missing_table = dynamodb.Table('MissingPersons')
found_table = dynamodb.Table('FoundPersons')
temp_table = dynamodb.Table('UserReports')

line_bot_api = LineBotApi(os.environ['YOUR_CHANNEL_ACCESS_TOKEN'])
handler = WebhookHandler(os.environ['YOUR_CHANNEL_SECRET'])

MISSING_STEPS = [
    {"key": "name_full", "prompt": "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•, ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ), ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô\n\t‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏ä‡∏±‡∏¢‡∏ä‡∏ô‡∏∞, ‡∏ò‡∏ô‡∏û‡∏• ‡∏ä‡∏±‡∏¢‡∏ä‡∏ô‡∏∞, ‡∏ä‡∏≤‡∏¢"},
    {"key": "gender_birth", "prompt": "‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞\n‡πÄ‡∏û‡∏® ‡πÅ‡∏•‡∏∞ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î ‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢\n\t‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏≤‡∏¢ , 25/05/2001"},
    {"key": "disease", "prompt": "‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡∏°‡∏µ ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß ‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞ ?\n‡∏´‡∏≤‡∏Å‡∏°‡∏µ ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏£‡∏∞‡∏ö‡∏∏\n\t‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏≠‡∏ö‡∏´‡∏∑‡∏î"},
    {"key": "disability", "prompt": "‡∏°‡∏µ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó, ‡∏´‡∏•‡∏á‡∏•‡∏∑‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà\n\t‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó ‡∏´‡∏•‡∏á‡∏•‡∏∑‡∏°\n‡∏´‡∏£‡∏∑‡∏≠\n‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏≤‡∏£ ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÉ‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö?\n‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n\t‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏´‡∏•‡∏á‡∏•‡∏∑‡∏°‡∏á‡πà‡∏≤‡∏¢ ‡∏Ø‡∏•‡∏Ø"},
    {"key": "appearance", "prompt": "‡∏Ç‡∏≠‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì‡∏™‡∏±‡∏ì‡∏ê‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö\n‡∏™‡∏µ‡∏ú‡∏¥‡∏ß (‡∏Ç‡∏≤‡∏ß ,‡∏î‡∏≥, ‡∏Ç‡∏≤‡∏ß-‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á, ‡∏î‡∏≥-‡πÅ‡∏î‡∏á)\n‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.)\n‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)\n\t‡∏™‡∏µ‡∏ú‡∏¥‡∏ß, ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á, ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å\n\t‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏≤‡∏ß, 191, 55"},
    {"key": "detail", "prompt": "‡∏´‡∏≤‡∏Å‡∏°‡∏µ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ\n\t‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏∏‡∏î‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤ ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏° ‡∏Ø‡∏•‡∏Ø ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏"},
    {"key": "photo", "prompt": "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏ô‡∏ö ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)\n\t‡πÄ‡∏ä‡πà‡∏ô (‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏ô‡∏ö‡πÉ‡∏ô LINE)\n\t‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏°‡∏µ"},
    {"key": "disappear_place_type", "prompt": "‡∏Ç‡∏≠‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÑ‡∏õ\n1.‡∏ö‡πâ‡∏≤‡∏ô 2.‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 3.‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á\n(‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)\n\t‡πÄ‡∏ä‡πà‡∏ô 2"},
    {"key": "disappear_address", "prompt": "‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÑ‡∏õ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏\n‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà\n‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà\n‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô/‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£\n‡∏ñ‡∏ô‡∏ô/‡∏ã‡∏≠‡∏¢\n‡∏ï‡∏≥‡∏ö‡∏• ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î\n\t‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏ó‡πà‡∏≤‡∏û‡∏£‡∏∞‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 2 ‡∏ñ‡∏ô‡∏ô‡∏û‡∏£‡∏∞‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå ‡πÅ‡∏Ç‡∏ß‡∏á‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á ‡πÄ‡∏Ç‡∏ï‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10200"},
    {"key": "disappear_datetime", "prompt": "üìÜ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞ ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏£?\n\t‡πÄ‡∏ä‡πà‡∏ô 25/5/2025 10:10 ‡∏ô."},
    {"key": "suspected_reason", "prompt": "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£\n(‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå)\n\t‡πÄ‡∏ä‡πà‡∏ô 1, 4, 5\n1. ‡∏°‡∏µ‡∏õ‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á / ‡∏ó‡∏∞‡πÄ‡∏•‡∏≤‡∏∞‡∏ß‡∏¥‡∏ß‡∏≤‡∏ó\n2. ‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≠‡∏•‡∏ß‡∏á\n3. ‡∏´‡∏•‡∏á‡∏•‡∏∑‡∏° / ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó\n4. ‡∏û‡∏•‡∏±‡∏î‡∏´‡∏•‡∏á / ‡∏ñ‡∏π‡∏Å‡∏•‡∏±‡∏Å‡∏û‡∏≤‡∏ï‡∏±‡∏ß\n5. ‡∏´‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏à\n6. ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"},
    {"key": "reporter_info", "prompt": "‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏\n‡∏ä‡∏∑‡πà‡∏≠\n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢\n‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå\n‡∏≠‡∏µ‡πÄ‡∏°‡∏•\n\t‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏≤‡∏¢ ‡∏á‡∏á‡∏á‡∏ß‡∏¢ ‡∏ô‡∏∞‡∏£‡∏≤‡∏ä  ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏µ‡πà‡∏ä‡∏≤‡∏¢ 0987654321 ngong@gmail.com"},
    {"key": "has_report_copy", "prompt": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏∞? (‡∏°‡∏µ / ‡πÑ‡∏°‡πà‡∏°‡∏µ)\n\t‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏≠‡∏ö ‡πÑ‡∏°‡πà‡∏°‡∏µ"},
    {"key": "police_info", "prompt": "‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πà‡∏∞\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏\n-‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏≥‡∏£‡∏ß‡∏à\n-‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡∏£‡∏ß‡∏à\n-‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°\n-‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏≥‡∏£‡∏ß‡∏à\n\t‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏≥‡∏£‡∏ß‡∏à‡∏†‡∏π‡∏ò‡∏£‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏Ñ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á\n\t‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏û‡∏•.‡∏ï.‡∏≠. ‡∏ß‡∏≤‡∏™‡∏ô‡∏≤ ‡∏î‡∏µ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏≤‡∏î\n\t25/5/2025\n\t0123456789\n\t‡∏ñ‡πâ‡∏≤ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏à‡πâ‡∏á/‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏û‡∏¥‡∏°‡∏û‡πå ‡πÑ‡∏°‡πà‡∏°‡∏µ"},
]

CLUE_STEPS = [
    {"key": "found_person_name", "prompt": "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡πÄ‡∏´‡πá‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö\nüìå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• (‡∏ñ‡πâ‡∏≤‡∏ó‡∏£‡∏≤‡∏ö)\n\t‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏ô‡∏∞‡∏£‡∏≤‡∏ä"},
    {"key": "found_person_desc", "prompt": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡πÄ‡∏´‡πá‡∏ô\n\t‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏û‡∏®, ‡∏≠‡∏≤‡∏¢‡∏∏‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì, ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤, ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©, ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏° ‡∏Ø‡∏•‡∏Ø"},
    {"key": "found_location", "prompt": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡πÄ‡∏´‡πá‡∏ô ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ô‡∏±‡πâ‡∏ô\n\t‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡πÉ‡∏Å‡∏•‡πâ‡∏ï‡∏•‡∏≤‡∏î, ‡∏ñ‡∏ô‡∏ô, ‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå, ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏Ø‡∏•‡∏Ø"},
    {"key": "found_datetime", "prompt": "üìÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡πÅ‡∏•‡∏∞ ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÄ‡∏´‡πá‡∏ô\n\t‡πÄ‡∏ä‡πà‡∏ô 25/5/2025 10:10 ‡∏ô."},
    {"key": "found_picture", "prompt": "‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÄ‡∏´‡πá‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö\n(‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ')"},
    {"key": "reporter_contact", "prompt": "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ö‡∏≤‡∏∞‡πÅ‡∏™‡∏Ñ‡∏£‡∏±‡∏ö üôè\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö"},
    {"key": "additional_note", "prompt": "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ‡∏Ç‡πâ‡∏≠‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?\n‡πÄ‡∏ä‡πà‡∏ô ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏á‡∏ó‡∏≤‡∏á, ‡∏û‡∏π‡∏î‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á, ‡∏°‡∏µ‡∏ö‡∏≤‡∏î‡πÅ‡∏ú‡∏•, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡∏ß‡∏ô‡πÑ‡∏õ‡∏°‡∏≤ ‡∏Ø‡∏•‡∏Ø"},
]

SCENARIOS = {
    "missing": MISSING_STEPS,
    "clue": CLUE_STEPS
}

DISAPPEAR_PLACE_MAP = {
    "1": "‡∏ö‡πâ‡∏≤‡∏ô",
    "2": "‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
    "3": "‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"
}

SUSPECTED_REASON_MAP = {
    "1": "‡∏°‡∏µ‡∏õ‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á / ‡∏ó‡∏∞‡πÄ‡∏•‡∏≤‡∏∞‡∏ß‡∏¥‡∏ß‡∏≤‡∏ó",
    "2": "‡∏ñ‡∏π‡∏Å‡∏•‡πà‡∏≠‡∏•‡∏ß‡∏á",
    "3": "‡∏´‡∏•‡∏á‡∏•‡∏∑‡∏° / ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó",
    "4": "‡∏û‡∏•‡∏±‡∏î‡∏´‡∏•‡∏á / ‡∏ñ‡∏π‡∏Å‡∏•‡∏±‡∏Å‡∏û‡∏≤‡∏ï‡∏±‡∏ß",
    "5": "‡∏´‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏à",
    "6": "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"
}

def lambda_handler(event, context):
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô lambda_handler")
    msg = json.loads(event['body'])
    user_id = msg['events'][0]['source']['userId']
    reply_token = msg['events'][0]['replyToken']
    message = msg['events'][0]['message']
    message_type = message['type']
    now = datetime.now(timezone.utc)

    user_data = get_user_data(user_id)

    if message_type == "text":
        user_message = message['text']
        if user_message == "‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏ô‡∏´‡∏≤‡∏¢":
            return start_scenario(user_id, reply_token, now, "missing")
        elif user_message == "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ö‡∏≤‡∏∞‡πÅ‡∏™":
            return start_scenario(user_id, reply_token, now, "clue")
    elif message_type == "image":
        user_message = "[IMAGE]"
    else:
        send_reply(reply_token, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ")
        return response_ok()

    if not user_data or "scenario" not in user_data:
        send_reply(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå '‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏ô‡∏´‡∏≤‡∏¢' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ö‡∏≤‡∏∞‡πÅ‡∏™' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        return response_ok()

    last_time = datetime.fromisoformat(user_data["last_update_time"])
    if now - last_time > timedelta(minutes=5):
        delete_user_data(user_id)
        send_reply(reply_token, "‚õîÔ∏è ‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        return response_ok()

    scenario = user_data["scenario"]
    steps = SCENARIOS[scenario]
    state = int(user_data["state"])
    key = steps[state]["key"]
    conversation = user_data.get("conversation", {})

    if message_type == "image":
        try:
            message_id = message['id']
            image_content = line_bot_api.get_message_content(message_id)
            image_data = image_content.content

            filename = f"{str(uuid.uuid4())}.jpg"
            s3.put_object(Bucket=S3_BUCKET, Key=filename, Body=image_data, ContentType='image/jpeg')

            image_url = f"https://{S3_BUCKET}.s3.amazonaws.com/{filename}"

            conversation[key] = image_url
        except Exception as e:
            print(f"üì∏ error loading image: {e}")
            send_reply(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö")
            return response_ok()
    else:
        if key == "disappear_place_type":
            conversation[key] = map_disappear_place(user_message)
        elif key == "suspected_reason":
            conversation[key] = map_suspected_reasons(user_message)
        else:
            conversation[key] = user_message

    next_state = state + 1

    if scenario == "missing" and key == "has_report_copy":
        if user_message.strip().lower() in ["‡πÑ‡∏°‡πà‡∏°‡∏µ", "no", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏∞", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö"]:
            next_state += 1

    if next_state < len(steps):
        update_user_data(user_id, {
            "user_id": user_id,
            "scenario": scenario,
            "state": next_state,
            "last_update_time": now.isoformat(),
            "conversation": conversation
        })
        send_reply(reply_token, steps[next_state]["prompt"])
    else:
        if scenario == "missing":
            write_to_missing_table(conversation)
        else:
            write_to_found_table(conversation)

        delete_user_data(user_id)
        send_reply(reply_token, "üéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ üôè")

    return response_ok()

def start_scenario(user_id, reply_token, now, scenario):
    update_user_data(user_id, {
        "user_id": user_id,
        "scenario": scenario,
        "state": 0,
        "last_update_time": now.isoformat(),
        "conversation": {}
    })
    send_reply(reply_token, SCENARIOS[scenario][0]["prompt"])
    return response_ok()

def get_user_data(user_id):
    try:
        res = temp_table.get_item(Key={'user_id': user_id})
        return res.get('Item')
    except Exception as e:
        print(f"get_user_data error: {e}")
        return None

def update_user_data(user_id, updates):
    try:
        temp_table.put_item(Item=updates)
    except Exception as e:
        print(f"update_user_data error: {e}")

def delete_user_data(user_id):
    try:
        temp_table.delete_item(Key={'user_id': user_id})
    except Exception as e:
        print(f"delete_user_data error: {e}")

def send_reply(token, text):
    try:
        line_bot_api.reply_message(token, TextSendMessage(text=text))
    except Exception as e:
        print(f"send_reply error: {e}")

def response_ok():
    return {"statusCode": 200, "body": json.dumps({"message": "ok"})}

def write_to_missing_table(convo):
    try:
        print("üì• [Debug] ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á MissingPersons")
        name_parts = convo.get("name_full", "").split(",")
        appearance = convo.get("appearance", "").split(",")
        gender_birth = convo.get("gender_birth", "").split(",")

        item = {
            "person_id": str(uuid.uuid4()),
            "name": name_parts[0].strip() if len(name_parts) > 0 else "",
            "old_name": name_parts[1].strip() if len(name_parts) > 1 else "",
            "nickname": name_parts[2].strip() if len(name_parts) > 2 else "",
            "sex": gender_birth[0].strip() if len(gender_birth) > 0 else "",
            "birthdate": gender_birth[1].strip() if len(gender_birth) > 1 else "",
            "congenital_disease": convo.get("disease", ""),
            "disability": convo.get("disability", ""),
            "skin_color": appearance[0].strip() if len(appearance) > 0 else "",
            "height": appearance[1].strip() if len(appearance) > 1 else "",
            "weight": appearance[2].strip() if len(appearance) > 2 else "",
            "detail": convo.get("detail", ""),
            "photo": convo.get("photo", ""),
            "disappear_location": convo.get("disappear_place_type", ""),
            "address": convo.get("disappear_address", ""),
            "date_time": convo.get("disappear_datetime", ""),
            "cause": convo.get("suspected_reason", ""),
            "reporter_info": convo.get("reporter_info", ""),
            "police_info": convo.get("police_info", "")
        }

        print("üìù [Debug] ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á DynamoDB:\n", json.dumps(item, indent=2, ensure_ascii=False))
        response = missing_table.put_item(Item=item)
        print("üõ†Ô∏è DynamoDB Response:", response)
        missing_table.put_item(Item=item)
        print("‚úÖ [Success] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    except Exception as e:
        print(f"‚ùå [Error] write_to_missing_table error: {e}")

def write_to_found_table(convo):
    try:
        found_table.put_item(Item={
            "person_id": str(uuid.uuid4()),
            "found_name": convo.get("found_person_name", ""),
            "found_description": convo.get("found_person_desc", ""),
            "found_location": convo.get("found_location", ""),
            "found_datetime": convo.get("found_datetime", ""),
            "found_picture": convo.get("found_picture", ""),
            "found_reporter_info": convo.get("reporter_contact", ""),
            "found_note": convo.get("additional_note", "")
        })
        print("üì• ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô write_to_found_table ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print(f"write_to_found_table error: {e}")

def map_disappear_place(value):
    return DISAPPEAR_PLACE_MAP.get(value.strip(), value.strip())

def map_suspected_reasons(value):
    return ", ".join([SUSPECTED_REASON_MAP.get(v.strip(), v.strip()) for v in value.split(",")])